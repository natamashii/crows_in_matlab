function fig_pretty = ...
    plot_c_g(diff_data, colours_pattern_diff, curr_experiments, ...
    what_analysis, who_analysis, err_type, calc_type, numerosities, ...
    sample_idx, plot_font, plot_pos, linewidth, mrksz, capsize, ...
    jitterwidth, dot_alpha, marker_factor, patterns, exp_x_vals)

% Function to Plot Chunking/Groupitizing Plot for Each Sample & Data Type

% Pre Allocation
leg_patch = [];
leg_label = string();
ax_top_all = gobjects(1, length(exp_x_vals)); % store top axes for ylabel later

if length(diff_data) > 1    % Plot the crows
    jitter_dots = [-jitterwidth jitterwidth];
else    % Plot humans
    jitter_dots = 0;
end

% Create Figure
fig = figure("Visible", "off");
tiled = tiledlayout(1, length(exp_x_vals), ...
    "TileSpacing", "compact", ...
    "Padding", "compact");

% Iterate over Subplots/Experiments
for exp_idx = 1:length(exp_x_vals)

    ax = nexttile(tiled, exp_idx);
    hold on

    % Axis Adjustments
    set(ax, "TickDir", "out")
    axis padded
    ax.YGrid = "on";    % plot horizontal grid lines
    ax.Color = "none";     % set background colour to white
    ax.XColor = "k";    % set colour of axis to black
    ax.YColor = "k";    % set colour of axis to black
    ax.FontWeight = "bold";
    ax.XAxis.FontSize = plot_font;  % set fontsize of ticks
    ax.YAxis.FontSize = plot_font;  % set fontsize of ticks
    xlabel(ax, " ", "FontWeight", "bold")
    ax.XTick = 1:3;
    ax.XTickLabel = ["P2 - P1", "P3 - P1", "P3 - P2"];
    ax.XTickLabelRotation = 0;
    ax.XLim = [0.5 3.5];
    % Set ylim depending on what_analysis
    if strcmp(what_analysis, 'Reaction Times')
        ax.YLim = [-50 50];
    else
        ax.YLim = [-0.5 0.5];
    end
    subtitle(ax, [curr_experiments{exp_x_vals(exp_idx)} ...
        ', Sample #' num2str(numerosities(sample_idx, 1))], ...
        "FontWeight", "bold", ...
        "FontSize", plot_font, ...
        "Color", "k")

    % Mark 0 Line
    ax0 = axes(tiled);
    ax0.Layout.Tile = ax.Layout.Tile;
    ax0.Color = [1 1 1];     % set background colour to white
    ax0.Box = "off";
    ax0.XAxis.Visible = "off";
    ax0.YAxis.Visible = "off";
    ax0.YGrid = "on";
    chance_colour = ax0.GridAlpha;
    yl = yline(ax0, 0, ...
        "LineStyle", ":", ...
        "Alpha", chance_colour * 3, ...
        "LineWidth", linewidth, ...
        "Color", "k");
    ax0.YGrid = "off";

    uistack(ax, "top")
    linkaxes([ax0, ax], "xy")

    % Iterate over Amount of Subjects to Plot
    for sub_idx = 1:length(diff_data)

        % Set Data
        curr_data = diff_data{sub_idx};
        curr_data = curr_data{exp_x_vals(exp_idx), sample_idx};
        ind_data = [curr_data{2, :}];
        avg_data = [curr_data{3, :}];
        err_data_low = [curr_data{4, :}];
        err_data_up = [curr_data{5, :}];

        % Iterate over Pattern Differences
        for pattern = 1:length(patterns)

            %% Plot Individual Dots
            % set y vals
            y_vals = ind_data(:, pattern);
            % set x vals
            x_vals = (ones(size(y_vals, 1), 1) * pattern) + ...
                jitter_dots(sub_idx);

            % Plot
            dot_plot = swarmchart(ax, x_vals, y_vals, ...
                mrksz * marker_factor, ...
                "XJitter", "randn", ...
                "XJitterWidth", jitterwidth, ...
                "Marker", "o", ...
                "MarkerFaceColor", colours_pattern_diff{sub_idx}, ...
                "MarkerEdgeColor", "none", ...
                "MarkerFaceAlpha", dot_alpha);
        end

        % Adjust Colors for Error & Mean Plot
        avg_colours = colours_pattern_diff{sub_idx};
        avg_colours = rgb2hsv(avg_colours);
        avg_colours(:, 3) = avg_colours(:, 3) * .7;
        avg_colours = hsv2rgb(avg_colours);

        %% Plot Average
        plot_avg = ...
            plot(ax, 1:length(patterns) + jitter_dots(sub_idx), ...
            avg_data', ...
            "LineStyle", "none", ...
            "LineWidth", linewidth, ...
            "Marker", "o", ...
            "Color", avg_colours, ...
            "MarkerFaceColor", avg_colours, ...
            "MarkerEdgeColor", "none", ...
            "MarkerSize", mrksz);

        %% Plot Error
        err_plot = ...
            errorbar(ax, 1:length(patterns) + jitter_dots(sub_idx), ...
            avg_data, err_data_low, err_data_up, ...
            "LineStyle", "none", ...
            "Color", avg_colours, ...
            "LineWidth", linewidth, ...
            "CapSize", capsize, ...
            "MarkerSize", mrksz);
    end

    ax_top_all(exp_idx) = ax;  % remember the top axes for later
end

ylabel(ax_top_all(1), ['Difference in ' what_analysis], ...
    "FontWeight","bold");

%% Legend Adjustments
% Invisible Plot for Average
plot_avg = plot(ax, 0, 0, ...
    "LineStyle", "none", ...
    "LineWidth", linewidth, ...
    "Marker", "o", ...
    "Color", "k", ...
    "MarkerFaceColor", "k", ...
    "MarkerEdgeColor", "none", ...
    "MarkerSize", mrksz);

% Invisible Error Plot
errr_plot = errorbar(ax, 0, 0, 0, 0, ...
    "LineStyle", "none", ...
    "LineWidth", linewidth, ...
    "Color", "k", ...
    "CapSize", capsize, ...
    "MarkerSize", mrksz);

leg_patch(1) = plot_avg;
leg_patch(2) = errr_plot;
leg_label(1) = calc_type;
leg_label(2) = err_type;

if length(diff_data) > 1    % Plot the crows
    % Adjust Colors for Error & Mean Plot
    avg_colours = cell2mat(colours_pattern_diff{1});
    avg_colours = rgb2hsv(avg_colours);
    avg_colours(:, 3) = avg_colours(:, 3) * .7;
    avg_colours = hsv2rgb(avg_colours);
    % Add invisible Jello plot
    jello_plot = ...
        boxchart(ax, ones(13, 1), ones(13, 1), ...
        "BoxFaceColor", colours_pattern_diff{1}, ...
        "BoxEdgeColor", avg_colours, ...
        "BoxFaceAlpha", 0.2, ...
        "BoxMedianLineColor", avg_colours, ...
        "WhiskerLineColor", avg_colours, ...
        "WhiskerLineStyle", "none", ...
        "LineWidth", linewidth, ...
        "MarkerStyle", "none");

    leg_patch(3) = jello_plot;
    leg_label(3) = "Jello";

    % Adjust Colors for Error & Mean Plot
    avg_colours = cell2mat(colours_pattern_diff{2});
    avg_colours = rgb2hsv(avg_colours);
    avg_colours(:, 3) = avg_colours(:, 3) * .7;
    avg_colours = hsv2rgb(avg_colours);
    % Add invisible Uri plot
    uri_plot = ...
        boxchart(ax, ones(8, 1), ones(8, 1), ...
        "BoxFaceColor", colours_pattern_diff{2}, ...
        "BoxEdgeColor", avg_colours, ...
        "BoxFaceAlpha", 0.2, ...
        "BoxMedianLineColor", avg_colours, ...
        "WhiskerLineColor", avg_colours, ...
        "WhiskerLineStyle", "none", ...
        "LineWidth", linewidth, ...
        "MarkerStyle", "none");

    leg_patch(4) = uri_plot;
    leg_label(4) = "Uri";

end

%% Figure Adjustments
set(fig, "Color", [1 1 1])  % set figure background to white

% change figure size
set(fig, "PaperUnits", "points")
set(fig, "PaperSize", [plot_pos(1) plot_pos(2)])
fig.Renderer = "painters";

leg = ...
    legend(ax_top_all(end), leg_patch, leg_label, ...
    "Box", "off", ...
    "Location", "bestoutside", ...
    "TextColor", "k", ...
    "FontSize", plot_font, ...
    "FontWeight", "bold");

fig_pretty = fig;
end