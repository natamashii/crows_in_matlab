function [big_statistics, post_hoc] = ...
    pattern_statistics(performances, resp_freq, rec_times, ...
    data_type, numerosities, patterns, avg_data_stats)

% function for statistics of pattern comparison

% pre allocation
filtered_table = cell(3, 3);
big_statistics = {"Test Type", "p-Value", "Table", "Stats", ...
    "Effect Size Type", "Effect Size"; ...
    "Kruskal-Wallis", NaN(1), NaN(1), NaN(1), "Epsilon Squared", NaN(1);
    "Friedman", NaN(1), NaN(1), NaN(1), "Kendall's W", NaN(1)};
post_hoc = {"Method for Correction", "Post-Hoc Test", "p-Value", ...
    "Effect Size Type", "Effect Size"; ...
    "Holm-Bonferroni", "Wilcoxon-Signed Rank", NaN(3, 1), ...
    "Rank-Biserial Correlation r", NaN(3, 1); ...
    "Sidak", "Dunn", NaN(3, 1), ...
    "Rank-Biserial Correlation r", NaN(3, 1)};

%% Arrange the data
% Write data as table
data_table = ...
    datatable(performances, resp_freq, rec_times, patterns, numerosities);

% iterate over patterns
for pattern = 1:length(patterns)
    % filter table to current pattern
    filtered_table{pattern, 1} = ...
        data_table(string(data_table.Pattern) == patterns{pattern}, :);

    switch data_type
        case "Performance"
            filtered_table{pattern, 2} = ...
                filtered_table{pattern, 1}.Performance;
            filtered_table{pattern, 3} = avg_data_stats(:, pattern);
        case "Response Frequency"
            filtered_table{pattern, 2} = ...
                filtered_table{pattern, 1}.ResponseFrequency;
            filtered_table{pattern, 3} = avg_data_stats(:, pattern);
        case "Reaction Times"
            filtered_table{pattern, 2} = ...
                filtered_table{pattern, 1}.RT;
            filtered_table{pattern, 3} = avg_data_stats(:, pattern);
    end
end

%% Statistical Test

% Kruskal-Wallis
[p_big, tbl_big, stats_big] = ...
    kruskalwallis([filtered_table{1, 3}, ...
    filtered_table{2, 3}, filtered_table{3, 3}], ...
    ["P1", "P2", "P3"], "off");

% get corresponding effect size: Epsilon Squared
H = tbl_big{2, 5};  % H-statistics/Chi squared
eps2 = H / (size(filtered_table{1, 3}, 1) - 1);

big_statistics{2, 2} = p_big;
big_statistics{2, 3} = tbl_big;
big_statistics{2, 4} = stats_big;
big_statistics{2, 6} = eps2;

% Friedman
[p_big, tbl_big, stats_big] = ...
    friedman([filtered_table{1, 3}, ...
    filtered_table{2, 3}, filtered_table{3, 3}], 1, "off");

% get corresponding effect size: Kendall's W
chi2 = tbl_big{2, 5};  % H-statistics/Chi squared
W = chi2 / ...
    (size(filtered_table{1, 3}, 1) * (length(patterns) - 1));

big_statistics{3, 2} = p_big;
big_statistics{3, 3} = tbl_big;
big_statistics{3, 4} = stats_big;
big_statistics{3, 6} = W;

% Post-Hoc analysis if significant
if big_statistics{2, 2} < 0.05 || big_statistics{3, 2} < 0.05
    % Wilcoxon Signed-Rank
    % P1 vs. P2
    [p_post_hoc_P1P2, ~, stats_post_hoc_P1P2] = ...
        signrank(filtered_table{1, 3}, filtered_table{2, 3});

    mu_W = (size(filtered_table{1, 3}, 1) * ...
        (size(filtered_table{1, 3}, 1) + 1)) / 4;
    sigma_W = sqrt((size(filtered_table{1, 3}, 1) * ...
        (size(filtered_table{1, 3}, 1) + 1) * ...
        (2 * size(filtered_table{1, 3}, 1) + 1)) / 24);
    stats_post_hoc_P1P2.zval = ...
        (stats_post_hoc_P1P2.signedrank - mu_W) / sigma_W;
    r_post_hoc_P1P2 = stats_post_hoc_P1P2.zval / ...
        sqrt(size(filtered_table{1, 3}, 1));

    % P2 vs. P3
    [p_post_hoc_P2P3, ~, stats_post_hoc_P2P3] = ...
        signrank(filtered_table{2, 3}, filtered_table{3, 3});

    mu_W = (size(filtered_table{1, 3}, 1) * ...
        (size(filtered_table{1, 3}, 1) + 1)) / 4;
    sigma_W = sqrt((size(filtered_table{1, 3}, 1) * ...
        (size(filtered_table{1, 3}, 1) + 1) * ...
        (2 * size(filtered_table{1, 3}, 1) + 1)) / 24);
    stats_post_hoc_P2P3.zval = ...
        (stats_post_hoc_P2P3.signedrank - mu_W) / sigma_W;
    r_post_hoc_P2P3 = stats_post_hoc_P2P3.zval / ...
        sqrt(size(filtered_table{1, 3}, 1));

    % P1 vs. P3
    [p_post_hoc_P1P3, ~, stats_post_hoc_P1P3] = ...
        signrank(filtered_table{1, 3}, filtered_table{3, 3});

    mu_W = (size(filtered_table{1, 3}, 1) * ...
        (size(filtered_table{1, 3}, 1) + 1)) / 4;
    sigma_W = sqrt((size(filtered_table{1, 3}, 1) * ...
        (size(filtered_table{1, 3}, 1) + 1) * ...
        (2 * size(filtered_table{1, 3}, 1) + 1)) / 24);
    stats_post_hoc_P1P3.zval = ...
        (stats_post_hoc_P1P3.signedrank - mu_W) / sigma_W;
    r_post_hoc_P1P3 = stats_post_hoc_P1P3.zval / ...
        sqrt(size(filtered_table{1, 3}, 1));

    % Holm-Bonferroni Correction of p-values
    [p_post_hoc_corr, ~] = ...
        bonf_holm([p_post_hoc_P1P2, p_post_hoc_P2P3, ...
        p_post_hoc_P1P3]);

    % save values
    post_hoc{2, 3}(1, 2) = p_post_hoc_corr(1);  % P1 vs. P2
    post_hoc{2, 3}(2, 2) = p_post_hoc_corr(2);  % P2 vs. P3
    post_hoc{2, 3}(3, 2) = p_post_hoc_corr(3);  % P1 vs. P3

    post_hoc{2, 5}(1, 2) = r_post_hoc_P1P2;     % P1 vs. P2
    post_hoc{2, 5}(2, 2) = r_post_hoc_P2P3;     % P2 vs. P3
    post_hoc{2, 5}(3, 2) = r_post_hoc_P1P3;     % P1 vs. P3

    % Dunn
    [c, ~, ~, ~] = ...
        multcompare(stats_big, ...
        "CriticalValueType", "dunn-sidak", ...
        "Display", "off");
    c = {"Index of Group 1", "Index of Group 2", ...
        "Lower Confidence Interval", "Estimate", ...
        "Upper Confidence Interval", "p-Value"; ...
        c(1, 1), c(1, 2), c(1, 3), c(1, 4), c(1, 5), c(1, 6); ...
        c(2, 1), c(2, 2), c(2, 3), c(2, 4), c(2, 5), c(2, 6); ...
        c(3, 1), c(3, 2), c(3, 3), c(3, 4), c(3, 5), c(3, 6)};

    % Effect Size: Rank-biserial correlation
    % P1 vs. P2
    [~, ~, stats_P1P2] = ...
        signrank(filtered_table{1, 3}, filtered_table{2, 3});

    mu_W = (size(filtered_table{1, 3}, 1) * ...
        (size(filtered_table{1, 3}, 1) + 1)) / 4;
    sigma_W = sqrt((size(filtered_table{1, 3}, 1) * ...
        (size(filtered_table{1, 3}, 1) + 1) * ...
        (2 * size(filtered_table{1, 3}, 1) + 1)) / 24);
    stats_P1P2.zval = ...
        (stats_P1P2.signedrank - mu_W) / sigma_W;
    
    % P2 vs. P3
    [~, ~, stats_P2P3] = ...
        signrank(filtered_table{2, 3}, filtered_table{3, 3});

    mu_W = (size(filtered_table{1, 3}, 1) * ...
        (size(filtered_table{1, 3}, 1) + 1)) / 4;
    sigma_W = sqrt((size(filtered_table{1, 3}, 1) * ...
        (size(filtered_table{1, 3}, 1) + 1) * ...
        (2 * size(filtered_table{1, 3}, 1) + 1)) / 24);
    stats_P2P3.zval = ...
        (stats_P2P3.signedrank - mu_W) / sigma_W;

    % P1 vs. P3
    [~, ~, stats_P1P3] = ...
        signrank(filtered_table{1, 3}, filtered_table{3, 3});

    mu_W = (size(filtered_table{1, 3}, 1) * ...
        (size(filtered_table{1, 3}, 1) + 1)) / 4;
    sigma_W = sqrt((size(filtered_table{1, 3}, 1) * ...
        (size(filtered_table{1, 3}, 1) + 1) * ...
        (2 * size(filtered_table{1, 3}, 1) + 1)) / 24);
    stats_P1P3.zval = ...
        (stats_P1P3.signedrank - mu_W) / sigma_W;

    r_post_hoc_P1P2 = ...
        stats_P1P2.zval / sqrt(size(filtered_table{1, 3}, 1));
    r_post_hoc_P2P3 = ...
        stats_P2P3.zval / sqrt(size(filtered_table{1, 3}, 1));
    r_post_hoc_P1P3 = ...
        stats_P1P3.zval / sqrt(size(filtered_table{1, 3}, 1));

    % save values
    post_hoc{3, 3}(1, 2) = c{2, 6};  % P1 vs. P2
    post_hoc{3, 3}(2, 2) = c{4, 6};  % P2 vs. P3
    post_hoc{3, 3}(3, 2) = c{3, 6};  % P1 vs. P3

    post_hoc{3, 5}(1, 2) = r_post_hoc_P1P2;     % P1 vs. P2
    post_hoc{3, 5}(2, 2) = r_post_hoc_P2P3;     % P2 vs. P3
    post_hoc{3, 5}(3, 2) = r_post_hoc_P1P3;     % P1 vs. P3

end

end