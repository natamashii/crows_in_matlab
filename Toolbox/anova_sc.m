function statistics = anova_sc(performances_s, performances_c, ...
    resp_freq_s, resp_freq_c, rec_times_s, rec_times_c, patterns, ...
    numerosities, factors)

% Function for statistics of Standard vs. Control

% Note: focuses on match trials only
% Note: maybe pre process RTs: remove too quick trials & remove everything
% that is +- 3* MAD of median

% pre allocation
p_vals_anova = zeros(length(patterns), 3);
p_vals_rm_anova2 = zeros(length(patterns), 3);
part_eta2 = zeros(length(patterns), 3);
f_stats_anova = zeros(length(patterns), 3);
f_stats_rm_anova2 = zeros(length(patterns), 3);
statistics = struct();

% write data as table
% iterate over patterns
for pattern = 1:length(patterns)
    % pre allocation
    data_table = table();
    subjects = (1:size(performances_s, 1))';    % subject/session col

    % iterate over samples
    for sample_idx = 1:size(numerosities, 1)

        % iterate over conditions
        for cond_idx = 1:length(factors)
            % sample col
            numerosity_col = repmat(numerosities(sample_idx, 1), ...
                size(subjects, 1), 1);
            condition_col = repmat(factors{cond_idx}, ...
                size(subjects, 1), 1);

            % condition & data cols
            if cond_idx == 1    % Standard Conditions/Jello
                performance_col = ...
                    performances_s(:, pattern, sample_idx, 1);
                resp_freq_col = ...
                    resp_freq_s(:, pattern, sample_idx, 1);
                % Reaction Time: take median for each subject/session
                rec_times_col = zeros(size(rec_times_s, 1), 1);
                % iterate over subejcts/sessions
                for sub_idx = 1:size(rec_times_s, 1)
                    rec_times_col(sub_idx) = ...
                        median(vertcat(rec_times_s{sub_idx, pattern, ...
                        sample_idx, 1}), "omitnan");
                end

            elseif cond_idx == 2    % Control Conditions/Uri
                performance_col = ...
                    performances_c(:, pattern, sample_idx, 1);
                resp_freq_col = ...
                    resp_freq_c(:, pattern, sample_idx, 1);
                % Reaction Time: take median for each subject/session
                rec_times_col = zeros(size(rec_times_c, 1), 1);
                % iterate over subejcts/sessions
                for sub_idx = 1:size(rec_times_c, 1)
                    rec_times_col(sub_idx) = ...
                        median(vertcat(rec_times_c{sub_idx, pattern, ...
                        sample_idx, 1}), "omitnan");
                end
            end

            % store as table
            temp_table = ...
                table(subjects, numerosity_col, condition_col, ...
                performance_col, resp_freq_col, rec_times_col, ...
                'VariableNames', ...
                    {'Subject', 'Numerosity', 'Condition', ...
                    'Performance', 'ResponseFrequency', 'RT'});
            data_table = [data_table; temp_table];  % append vertically
        end
    end
    
    %% Repeated Measured ANOVA
    % Make within-subject factors categorical
    data_table.Numerosity = categorical(data_table.Numerosity);
    data_table.Condition = categorical(cellstr(data_table.Condition));
    data_table.Subject = categorical(data_table.Subject);

    % make repeated measures model
    lme_model_performance = ...
        fitlme(data_table, 'Performance ~ Numerosity * Condition + (1|Subject)');
    lme_model_resp_freq = ...
        fitlme(data_table, 'ResponseFrequency ~ Numerosity * Condition + (1|Subject)');
    lme_model_rec_times = ...
        fitlme(data_table, 'RT ~ Numerosity * Condition + (1|Subject)');

    % Run ANOVA
    anova_tab_performance = anova(lme_model_performance);
    anova_tab_resp_freq = anova(lme_model_resp_freq);
    anova_tab_rec_times = anova(lme_model_rec_times);

    stats_performance = ...
        rm_anova2(data_table.Performance, ...
        data_table.Subject, data_table.Numerosity, data_table.Condition, ...
        {'Numerosity', 'Condition'});
    stats_resp_freq = ...
        rm_anova2(data_table.ResponseFrequency, ...
        data_table.Subject, data_table.Numerosity, data_table.Condition, ...
        {'Numerosity', 'Condition'});
    stats_rec_times = ...
        rm_anova2(data_table.RT, ...
        data_table.Subject, data_table.Numerosity, data_table.Condition, ...
        {'Numerosity', 'Condition'});

    %% Effect Size: Partial Eta Squared
    % convert columns back to normal
    data_table.Condition = char(data_table.Condition);
    data_table.Numerosity = str2num(char(data_table.Numerosity));

    % compute effect size
    part_eta2_performance = ...
        (anova_tab_performance.FStat .* anova_tab_performance.DF1) / ...
        ((anova_tab_performance.FStat .* anova_tab_performance.DF1) + ...
        anova_tab_performance.DF2);
    part_eta2_resp_freq = ...
        (anova_tab_resp_freq.FStat .* anova_tab_resp_freq.DF1) / ...
        ((anova_tab_resp_freq.FStat .* anova_tab_resp_freq.DF1) + ...
        anova_tab_resp_freq.DF2);
    part_eta2_rec_times = ...
        (anova_tab_rec_times.FStat .* anova_tab_rec_times.DF1) / ...
        ((anova_tab_rec_times.FStat .* anova_tab_rec_times.DF1) + ...
        anova_tab_rec_times.DF2);
    
    % save the statistics
    p_vals_anova(pattern, 1) = anova_tab_performance.pValue(3);
    p_vals_anova(pattern, 2) = anova_tab_resp_freq.pValue(3);
    p_vals_anova(pattern, 3) = anova_tab_rec_times.pValue(3);
    p_vals_rm_anova2(pattern, 1) = stats_performance{3, 6};
    p_vals_rm_anova2(pattern, 2) = stats_resp_freq{3, 6};
    p_vals_rm_anova2(pattern, 3) = stats_rec_times{3, 6};
    f_stats_anova(pattern, 1) = anova_tab_performance.FStat(3);
    f_stats_anova(pattern, 2) = anova_tab_resp_freq.FStat(3);
    f_stats_anova(pattern, 3) = anova_tab_rec_times.FStat(3);
    f_stats_rm_anova2(pattern, 1) = stats_performance{3, 5};
    f_stats_rm_anova2(pattern, 2) = stats_resp_freq{3, 5};
    f_stats_rm_anova2(pattern, 3) = stats_rec_times{3, 5};
    part_eta2(pattern, 1) = part_eta2_performance(3);
    part_eta2(pattern, 2) = part_eta2_resp_freq(3);
    part_eta2(pattern, 3) = part_eta2_rec_times(3);

end

% save the statistics as table
statistics.Performance = ...
    table(p_vals_anova(:, 1), p_vals_rm_anova2(:, 1), ...
    f_stats_anova(:, 1), f_stats_rm_anova2(:, 1), part_eta2(:, 1), ...
    patterns', 'VariableNames', ...
    {'p Value ANOVA', 'p Value RM ANOVA', ...
    'F Stat ANOVA', 'F Stat RM ANOVA', ...
    'Partial Eta Squared', 'Pattern Type'});
statistics.ResponseFrequency = ...
    table(p_vals_anova(:, 2), p_vals_rm_anova2(:, 2), ...
    f_stats_anova(:, 2), f_stats_rm_anova2(:, 2), part_eta2(:, 2), ...
    patterns', 'VariableNames', ...
    {'p Value ANOVA', 'p Value RM ANOVA', ...
    'F Stat ANOVA', 'F Stat RM ANOVA', ...
    'Partial Eta Squared', 'Pattern Type'});
statistics.RT = ...
    table(p_vals_anova(:, 3), p_vals_rm_anova2(:, 3), ...
    f_stats_anova(:, 3), f_stats_rm_anova2(:, 3), part_eta2(:, 3), ...
    patterns', 'VariableNames', ...
    {'p Value ANOVA', 'p Value RM ANOVA', ...
    'F Stat ANOVA', 'F Stat RM ANOVA', ...
    'Partial Eta Squared', 'Pattern Type'});

end