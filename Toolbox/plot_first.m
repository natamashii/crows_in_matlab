function [ax, dot_plots, leg_patch, leg_label] = ...
    plot_first(numerosities, jitter_dots, ind_data, avg_data, ...
    err_down, err_up, patterns, colours, plot_font, what_analysis, ...
    err_type, linewidth, linestyle, mrksz, capsize, focus_type, sample_idx)

% function to create variations of the first plot

% pre allocation
leg_patch = [];
leg_label = string();
dot_plots = {};

% iterate over patterns
for pattern = 1:length(patterns)
    hold on
    ax = gca;
    axis padded

    % Subplot Adjustments
    ax.YGrid = "on";    % plot horizontal grid lines
    ax.Color = [1 1 1];     % set background colour to white
    ax.XColor = "k";    % set colour of axis to black
    ax.YColor = "k";    % set colour of axis to black
    ax.FontWeight = 'bold';
    ax.XAxis.FontSize = plot_font;  % set fontsize of ticks
    ax.YAxis.FontSize = plot_font;  % set fontsize of ticks
    xlabel(ax, 'Sample Numerosity', 'FontWeight', 'bold');    % set x-axis label
    ax.XTick = numerosities(:, 1);
    ax.XTickLabel = num2str(numerosities(:, 1));
    ax.XTickLabelRotation = 0;
    ax.XLim = [min(numerosities(:, 1)) - .5 max(numerosities(:, 1)) + .5];

    switch focus_type
        case 'Single'
            % iterate over test numbers
            if strcmp(what_analysis, 'Reaction Times')
                for test_idx = 1:size(numerosities, 2)
                    % concat RTs for all test numbers & subject/sessions
                    y_vals = ...
                        vertcat(ind_data{:, pattern, sample_idx, test_idx});

                    % adjust x vals
                    x_vals = ones(size(y_vals, 1), 1);
                    x_vals = ...
                        (x_vals * numerosities(sample_idx, test_idx)) + ...
                        jitter_dots(pattern);

                    % Box Plot
                    plot_pattern = ...
                        boxchart(x_vals, y_vals, ...
                        'BoxFaceColor', colours{pattern}, ...
                        'BoxEdgeColor', colours{pattern}, ...
                        'BoxFaceAlpha', 0.2, ...
                        'BoxMedianLineColor', colours{pattern}, ...
                        'WhiskerLineColor', colours{pattern}, ...
                        'WhiskerLineStyle', "none", ...
                        'LineWidth', linewidth, ...
                        'MarkerStyle', "none");
                    plot_pattern.BoxWidth = plot_pattern.BoxWidth / 3;

                end
            else
                % set values
                y_vals = squeeze(avg_data(pattern, sample_idx, :));
                x_vals = ones(size(y_vals, 1), 1);
                x_vals = ...
                    (x_vals .* numerosities(sample_idx, :)') + ...
                    jitter_dots(pattern);
                % sort values
                [~, sort_idx] = sort(numerosities(sample_idx, :));
                y_vals = y_vals(sort_idx);
                x_vals = x_vals(sort_idx);
                err_d = squeeze(err_down(pattern, sample_idx, :));
                err_d = err_d(sort_idx);
                err_u = squeeze(err_up(pattern, sample_idx, :));
                err_u = err_u(sort_idx);

                % Mark Chance Level
                chance_colour = ax.GridAlpha;
                yline(0.5, 'LineStyle', ':', ...
                    'Alpha', chance_colour * 3, ...
                    'LineWidth', linewidth, 'Color', 'k')

                % plot error
                err_plot = errorbar(x_vals, y_vals, err_d, err_u, ...
                    'LineStyle', linestyle, 'Color', colours{pattern}, ...
                    'LineWidth', linewidth, ...
                    'Capsize', capsize, 'MarkerSize', mrksz);

                % plot mean/median
                plot_pattern = ...
                    plot(x_vals, y_vals, ...
                    'LineStyle', linestyle, 'LineWidth', linewidth, ...
                    'Marker', 'o', 'Color', colours{pattern}, ...
                    'MarkerFaceColor', colours{pattern}, ...
                    'MarkerEdgeColor', 'none', 'MarkerSize', mrksz);

                dot_plots{end + 1} = plot_pattern;
            end
            
            % Specific Adjustments
            xlabel(ax, 'Test Numerosity', 'FontWeight', 'bold');
            ax.XTick = unique(numerosities);
            ax.XTickLabel = num2str(unique(numerosities));
            ax.XTickLabelRotation = 0;
            ax.XLim = [min(numerosities, [], "all") - .5 ...
                max(numerosities, [], "all") + .5];

        case 'Overall'
            % Reaction Times
            if strcmp(what_analysis, 'Reaction Times')
                % iterate over samples
                for sample_idx = 1:size(numerosities, 1)
                    % set values
                    y_vals = vertcat(ind_data{:, pattern, sample_idx, :});
                    x_vals = ones(size(y_vals, 1), 1);
                    x_vals = (x_vals * numerosities(sample_idx, 1)) + ...
                        jitter_dots(pattern);

                    % Box Plot
                    plot_pattern = ...
                        boxchart(x_vals, y_vals, ...
                        'BoxFaceColor', colours{pattern}, ...
                        'BoxEdgeColor', colours{pattern}, ...
                        'BoxFaceAlpha', 0.2, ...
                        'BoxMedianLineColor', colours{pattern}, ...
                        'WhiskerLineColor', colours{pattern}, ...
                        'WhiskerLineStyle', "none", ...
                        'LineWidth', linewidth, ...
                        'MarkerStyle', "none");
                    plot_pattern.BoxWidth = plot_pattern.BoxWidth / 3;
                end
            else
                % set values
                y_vals = avg_data(pattern, :);
                x_vals = (ones(size(y_vals, 1), 1) ...
                    .* numerosities(:, 1)') + ...
                    jitter_dots(pattern);

                % Mark Chance Level
                chance_colour = ax.GridAlpha;
                yline(0.5, 'LineStyle', ':', ...
                    'Alpha', chance_colour * 3, ...
                    'LineWidth', linewidth, 'Color', 'k')

                % Plot Error
                err_plot = errorbar(x_vals, y_vals, ...
                    err_down(pattern, :)', err_up(pattern, :)', ...
                    'LineStyle', 'none', 'Color', colours{pattern}, ...
                    'LineWidth', linewidth, ...
                    'Capsize', capsize, 'MarkerSize', mrksz);

                % plot mean/median
                plot_pattern = ...
                    plot(x_vals, y_vals, ...
                    'LineStyle', linestyle, 'LineWidth', linewidth, ...
                    'Marker', 'o', 'Color', colours{pattern}, ...
                    'MarkerFaceColor', colours{pattern}, ...
                    'MarkerEdgeColor', 'none', 'MarkerSize', mrksz);
            end

        case 'Matches'
            % Reaction Times
            if strcmp(what_analysis, 'Reaction Times')
                % iterate over samples
                for sample_idx = 1:size(numerosities, 1)
                    % set values
                    y_vals = vertcat(ind_data{:, pattern, sample_idx, 1});
                    x_vals = ones(size(y_vals, 1), 1);
                    x_vals = (x_vals * numerosities(sample_idx, 1)) + ...
                        jitter_dots(pattern);

                    % Box Plot
                    plot_pattern = ...
                        boxchart(x_vals, y_vals, ...
                        'BoxFaceColor', colours{pattern}, ...
                        'BoxEdgeColor', colours{pattern}, ...
                        'BoxFaceAlpha', 0.2, ...
                        'BoxMedianLineColor', colours{pattern}, ...
                        'WhiskerLineColor', colours{pattern}, ...
                        'WhiskerLineStyle', "none", ...
                        'LineWidth', linewidth, ...
                        'MarkerStyle', "none");
                    plot_pattern.BoxWidth = plot_pattern.BoxWidth / 3;
                end
            else
                % set values
                y_vals = avg_data(pattern, :);
                x_vals = (ones(size(y_vals, 1), 1) ...
                    .* numerosities(:, 1)') + ...
                    jitter_dots(pattern);

                % Mark Chance Level
                chance_colour = ax.GridAlpha;
                yline(0.5, 'LineStyle', ':', ...
                    'Alpha', chance_colour * 3, ...
                    'LineWidth', linewidth, 'Color', 'k')

                % Plot Error
                err_plot = errorbar(x_vals, y_vals, ...
                    err_down(pattern, :)', err_up(pattern, :)', ...
                    'LineStyle', 'none', 'Color', colours{pattern}, ...
                    'LineWidth', linewidth, ...
                    'Capsize', capsize, 'MarkerSize', mrksz);

                % plot mean/median
                plot_pattern = ...
                    plot(x_vals, y_vals, ...
                    'LineStyle', linestyle, 'LineWidth', linewidth, ...
                    'Marker', 'o', 'Color', colours{pattern}, ...
                    'MarkerFaceColor', colours{pattern}, ...
                    'MarkerEdgeColor', 'none', 'MarkerSize', mrksz);
            end
    end

    % for legend
    dot_plots{end + 1} = plot_pattern;
    leg_patch(end + 1) = plot_pattern;
    leg_label(pattern) = patterns{pattern};

end

% add error type to legend labels
leg_label(end + 1) = err_type;

end
