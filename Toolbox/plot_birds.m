function fig_pretty = ...
    plot_birds(numerosities, ind_data_j_s, ind_data_j_c, ...
    ind_data_u_s, ind_data_u_c, ...
    avg_data_j_s, avg_data_j_c, avg_data_u_s, avg_data_u_c, ...
    err_data_j_s, err_data_j_c, err_data_u_s, err_data_u_c, ...
    what_analysis, who_analysis, calc_type, experiment, ...
    err_type, jitterwidth, colours_split, mrksz, plot_font, plot_pos, ...
    linewidth, capsize, linestyle, factors)

% Function to Plot Behavioural Data of Jello & Uri with Focus on Comparing
% Standard & Control Conditions

%% Pre Allocation
leg_patch = [];
leg_label = string();

%% Pre Definition
dot_alpha = 0.3;
marker_factor = 4;
jitter_dots = [-(2.5 * jitterwidth), - jitterwidth, jitterwidth, (2.5 * jitterwidth)];

%% Plot
% Create Figure
fig = figure("Visible", "off");
hold on
ax = gca;
axis padded

% Subplot Adjustments
ax.YGrid = "on";    % horizontal grid lines
ax.Color = [1 1 1];     % set bakcground colour to white
ax.XColor = "k";    % set y-axis colour to black
ax.YColor = "k";    % set x-axis colour to black
ax.FontWeight = "bold";
ax.XAxis.FontSize = plot_font;  % set fontsize of x ticks
ax.YAxis.FontSize = plot_font;  % set fontsize of y ticks
ax.XTick = numerosities(:, 1);  % set x ticks
ax.XTickLabel = num2str(numerosities(:, 1));
ax.XTickLabelRotation = 0;
ax.XLim = [min(numerosities(:, 1)) - .5 max(numerosities(:, 1)) + .5];
xlabel(ax, "Sample Numerosity", "FontWeight", "bold")
set(gca, "TickDir", "out")
% set ylim
if strcmp(what_analysis, 'Reaction Times')
    ax.YLim = [0 800];
    ylabel(ax, "Reaction Times [ms]")
else
    ax.YLim = [0 1];
    ax.YTick = 0:0.2:1;
    ylabel(ax, what_analysis)
end

% Iterate over Samples
for sample_idx = 1:size(numerosities, 1)
    
    % Plot Individual Dots
    if strcmp(what_analysis, 'Reaction Times')
        % Jello
        y_vals_ind_j_s = vertcat(ind_data_j_s{:, :, sample_idx, 1});
        y_vals_ind_j_c = vertcat(ind_data_j_c{:, :, sample_idx, 1});
        % Uri
        y_vals_ind_u_s = vertcat(ind_data_u_s{:, :, sample_idx, 1});
        y_vals_ind_u_c = vertcat(ind_data_u_c{:, :, sample_idx, 1});
    else
        % Jello
        y_vals_ind_j_s = reshape(ind_data_j_s(:, :, sample_idx, :), [], 1);
        y_vals_ind_j_c = reshape(ind_data_j_c(:, :, sample_idx, :), [], 1);
        % Uri
        y_vals_ind_u_s = reshape(ind_data_u_s(:, :, sample_idx, :), [], 1);
        y_vals_ind_u_c = reshape(ind_data_u_c(:, :, sample_idx, :), [], 1);
    end

    % Adjust x vals
    x_vals_j_s = ...    % Jello, Standard Conditions
        (ones(numel(y_vals_ind_j_s), 1) * ...
        numerosities(sample_idx, 1)) + jitter_dots(1);
    x_vals_j_c = ...      % Jello, Control Conditions
        (ones(numel(y_vals_ind_j_c), 1) * ...
        numerosities(sample_idx, 1)) + jitter_dots(3);
    x_vals_u_s = ...    % Uri, Standard Conditions
        (ones(numel(y_vals_ind_u_s), 1) * ...
        numerosities(sample_idx, 1)) + jitter_dots(2);
    x_vals_u_c = ...      % Uri, Control Conditions
        (ones(numel(y_vals_ind_u_c), 1) * ...
        numerosities(sample_idx, 1)) + jitter_dots(4);

    % Plot Individual Dots: Jello, Standard Conditions
    dot_plot_j_s = swarmchart(x_vals_j_s, y_vals_ind_j_s, ...
        mrksz * marker_factor, ...
        "XJitter", "randn", ...
        "XJitterWidth", jitterwidth * 0.5, ...
        "Marker", "v", ...
        "MarkerFaceColor", colours_split{1}, ...
        "MarkerEdgeColor", "none", ...
        "MarkerFaceAlpha", dot_alpha);
    % Jello, Control Conditions
    dot_plot_j_c = swarmchart(x_vals_j_c, y_vals_ind_j_c, ...
        mrksz * marker_factor, ...
        "XJitter", "randn", ...
        "XJitterWidth", jitterwidth * 0.5, ...
        "Marker", "square", ...
        "MarkerFaceColor", colours_split{1}, ...
        "MarkerEdgeColor", "none", ...
        "MarkerFaceAlpha", dot_alpha);
    % Uri, Standard Conditions
    dot_plot_u_s = swarmchart(x_vals_u_s, y_vals_ind_u_s, ...
        mrksz * marker_factor, ...
        "XJitter", "randn", ...
        "XJitterWidth", jitterwidth * 0.5, ...
        "Marker", "v", ...
        "MarkerFaceColor", colours_split{2}, ...
        "MarkerEdgeColor", "none", ...
        "MarkerFaceAlpha", dot_alpha);
    % Uri, Control Conditions
    dot_plot_u_c = swarmchart(x_vals_u_c, y_vals_ind_u_c, ...
        mrksz * marker_factor, ...
        "XJitter", "randn", ...
        "XJitterWidth", jitterwidth * 0.5, ...
        "Marker", "square", ...
        "MarkerFaceColor", colours_split{2}, ...
        "MarkerEdgeColor", "none", ...
        "MarkerFaceAlpha", dot_alpha);

    % Adjust Colors for Error & Mean Plot
    avg_colours = cell2mat(colours_split);
    avg_colours = rgb2hsv(avg_colours);
    avg_colours(:, 3) = avg_colours(:, 3) * .7;
    avg_colours = hsv2rgb(avg_colours);

    % Plot Averages
    if strcmp(what_analysis, 'Reaction Times')
        
        % Plot Boxplot: Jello, Standard Conditions
        plot_pattern_j_s = boxchart(x_vals_j_s, y_vals_ind_j_s, ...
            "BoxFaceColor", colours_split{1}, ...
            "BoxEdgeColor", avg_colours(1, :), ...
            "BoxFaceAlpha", 0.2, ...
            "BoxMedianLineColor", avg_colours(1, :), ...
            "WhiskerLineColor", avg_colours(1, :), ...
            "WhiskerLineStyle", "none", ...
            "LineWidth", linewidth, ...
            "MarkerStyle", "none");
        plot_pattern_j_s.BoxWidth = plot_pattern_j_s.BoxWidth / 5;
        % Plot Boxplot: Jello, Control Conditions
        plot_pattern_j_c = boxchart(x_vals_j_c, y_vals_ind_j_c, ...
            "BoxFaceColor", colours_split{1}, ...
            "BoxEdgeColor", avg_colours(1, :), ...
            "BoxFaceAlpha", 0.2, ...
            "BoxMedianLineColor", avg_colours(1, :), ...
            "WhiskerLineColor", avg_colours(1, :), ...
            "WhiskerLineStyle", "none", ...
            "LineWidth", linewidth, ...
            "MarkerStyle", "none");
        plot_pattern_j_c.BoxWidth = plot_pattern_j_c.BoxWidth / 5;
        % Plot Boxplot: Uri, Standard Conditions
        plot_pattern_u_s = boxchart(x_vals_u_s, y_vals_ind_u_s, ...
            "BoxFaceColor", colours_split{2}, ...
            "BoxEdgeColor", avg_colours(2, :), ...
            "BoxFaceAlpha", 0.2, ...
            "BoxMedianLineColor", avg_colours(2, :), ...
            "WhiskerLineColor", avg_colours(2, :), ...
            "WhiskerLineStyle", "none", ...
            "LineWidth", linewidth, ...
            "MarkerStyle", "none");
        plot_pattern_u_s.BoxWidth = plot_pattern_u_s.BoxWidth / 5;
        % Plot Boxplot: Uri, Control Conditions
        plot_pattern_u_c = boxchart(x_vals_u_c, y_vals_ind_u_c, ...
            "BoxFaceColor", colours_split{2}, ...
            "BoxEdgeColor", avg_colours(2, :), ...
            "BoxFaceAlpha", 0.2, ...
            "BoxMedianLineColor", avg_colours(2, :), ...
            "WhiskerLineColor", avg_colours(2, :), ...
            "WhiskerLineStyle", "none", ...
            "LineWidth", linewidth, ...
            "MarkerStyle", "none");
        plot_pattern_u_c.BoxWidth = plot_pattern_u_c.BoxWidth / 5;

    else
        % Adjust y vals
        y_vals_j_s = avg_data_j_s(sample_idx);
        y_vals_j_c = avg_data_j_c(sample_idx);
        y_vals_u_s = avg_data_u_s(sample_idx);
        y_vals_u_c = avg_data_u_c(sample_idx);

        % Adjust x vals
        x_vals_j_s = (ones(numel(y_vals_j_s), 1) * ...
            numerosities(sample_idx, 1) + jitter_dots(1));
        x_vals_j_c = (ones(numel(y_vals_j_s), 1) * ...
            numerosities(sample_idx, 1) + jitter_dots(3));
        x_vals_u_s = (ones(numel(y_vals_j_s), 1) * ...
            numerosities(sample_idx, 1) + jitter_dots(2));
        x_vals_u_c = (ones(numel(y_vals_j_s), 1) * ...
            numerosities(sample_idx, 1) + jitter_dots(4));

        % Adjust Error Data
        y_err_j_s = err_data_j_s(sample_idx);
        y_err_j_c = err_data_j_c(sample_idx);
        y_err_u_s = err_data_u_s(sample_idx);
        y_err_u_c = err_data_u_c(sample_idx);

        % Mark Chancel Level
        chance_colour = ax.GridAlpha;
        yline(0.5, ...
            "LineStyle", ":", ...
            "Alpha", chance_colour * 3, ...
            "LineWidth", linewidth, ...
            "Color", "k")

        % Plot Error: Jello, Standard Conditions
        error_plot_j_s = ...
            errorbar(x_vals_j_s, y_vals_j_s, y_err_j_s, y_err_j_s, ...
            "LineStyle", "none", ...
            "Color", avg_colours(1, :), ...
            "LineWidth", linewidth, ...
            "CapSize", capsize, ...
            "MarkerSize", mrksz);
        % Jello, Control Conditions
        error_plot_j_c = ...
            errorbar(x_vals_j_c, y_vals_j_c, y_err_j_c, y_err_j_c, ...
            "LineStyle", "none", ...
            "Color", avg_colours(1, :), ...
            "LineWidth", linewidth, ...
            "CapSize", capsize, ...
            "MarkerSize", mrksz);
        % Uri, Standard Conditions
        error_plot_u_s = ...
            errorbar(x_vals_u_s, y_vals_u_s, y_err_u_s, y_err_u_s, ...
            "LineStyle", "none", ...
            "Color", avg_colours(2, :), ...
            "LineWidth", linewidth, ...
            "CapSize", capsize, ...
            "MarkerSize", mrksz);
        % Uri, Control Conditions
        error_plot_u_c = ...
            errorbar(x_vals_u_c, y_vals_u_c, y_err_u_c, y_err_u_c, ...
            "LineStyle", "none", ...
            "Color", avg_colours(2, :), ...
            "LineWidth", linewidth, ...
            "CapSize", capsize, ...
            "MarkerSize", mrksz);

        % Plot Mean: Jello, Standard Conditions
        plot_pattern_j_s = plot(x_vals_j_s, y_vals_j_s, ...
            "LineStyle", linestyle, ...
            "LineWidth", linewidth, ...
            "Marker", "v", ...
            "Color", avg_colours(1, :), ...
            "MarkerFaceColor", avg_colours(1, :), ...
            "MarkerEdgeColor", "none", ...
            "MarkerSize", mrksz);
        plot_pattern_j_c = plot(x_vals_j_c, y_vals_j_c, ...
            "LineStyle", linestyle, ...
            "LineWidth", linewidth, ...
            "Marker", "square", ...
            "Color", avg_colours(1, :), ...
            "MarkerFaceColor", avg_colours(1, :), ...
            "MarkerEdgeColor", "none", ...
            "MarkerSize", mrksz);
        plot_pattern_u_s = plot(x_vals_u_s, y_vals_u_s, ...
            "LineStyle", linestyle, ...
            "LineWidth", linewidth, ...
            "Marker", "v", ...
            "Color", avg_colours(2, :), ...
            "MarkerFaceColor", avg_colours(2, :), ...
            "MarkerEdgeColor", "none", ...
            "MarkerSize", mrksz);
        plot_pattern_u_c = plot(x_vals_u_c, y_vals_u_c, ...
            "LineStyle", linestyle, ...
            "LineWidth", linewidth, ...
            "Marker", "square", ...
            "Color", avg_colours(2, :), ...
            "MarkerFaceColor", avg_colours(2, :), ...
            "MarkerEdgeColor", "none", ...
            "MarkerSize", mrksz);
    end

    % Add invisible plot for err_type
    err_plot = errorbar(1, 1, 5, 1, ...
        "LineStyle", "none", ...
        "Color", "k", ...
        "LineWidth", linewidth, ...
        "CapSize", capsize, ...
        "MarkerSize", mrksz, ...
        "Marker", "o", ...
        "MarkerEdgeColor", "none", ...
        "MarkerFaceColor", "k");
    % Add invisible plot for Jello
    jello_plot = ...
        boxchart(ones(size(y_vals_ind_j_s, 1), 1), y_vals_ind_j_s, ...
        "BoxFaceColor", colours_split{1}, ...
        "BoxEdgeColor", avg_colours(1, :), ...
        "BoxFaceAlpha", 0.2, ...
        "BoxMedianLineColor", avg_colours(1, :), ...
        "WhiskerLineColor", avg_colours(1, :), ...
        "WhiskerLineStyle", "none", ...
        "LineWidth", linewidth, ...
        "MarkerStyle", "none");
    % Add invisble plot for Uri
    uri_plot = ...
        boxchart(ones(size(y_vals_ind_u_s, 1), 1), y_vals_ind_u_s, ...
        "BoxFaceColor", colours_split{2}, ...
        "BoxEdgeColor", avg_colours(2, :), ...
        "BoxFaceAlpha", 0.2, ...
        "BoxMedianLineColor", avg_colours(2, :), ...
        "WhiskerLineColor", avg_colours(2, :), ...
        "WhiskerLineStyle", "none", ...
        "LineWidth", linewidth, ...
        "MarkerStyle", "none");
    % Add invisible plot for standard Conditions
    standard_plot = plot(1, 1, ...
        "LineStyle", linestyle, ...
        "LineWidth", linewidth, ...
        "Marker", "v", ...
        "Color", "k", ...
        "MarkerFaceColor", "k", ...
        "MarkerEdgeColor", "none", ...
        "MarkerSize", mrksz);
    % Add invisible plot for Control Conditions
    control_plot = plot(1, 1, ...
        "LineStyle", linestyle, ...
        "LineWidth", linewidth, ...
        "Marker", "square", ...
        "Color", "k", ...
        "MarkerFaceColor", "k", ...
        "MarkerEdgeColor", "none", ...
        "MarkerSize", mrksz);
    % Legend
    leg_patch(1) = jello_plot;
    leg_patch(2) = uri_plot;
    leg_patch(3) = standard_plot;
    leg_patch(4) = control_plot;
    leg_patch(5) = err_plot;
    leg_label(1) = factors{1};
    leg_label(2) = factors{2};
    leg_label(3) = 'Standard';
    leg_label(4) = 'Control';
    leg_label(5) = err_type;
end

% Figure Adjustments

fig_title = title([calc_type ' ' what_analysis ' of ' ...
    who_analysis ' in ' experiment ' Sample Time ']); 
[fig_pretty, ~] = ...
    prettify_plot(fig, plot_pos, fig_title, plot_font, ...
    true, leg_patch, leg_label, 'Stimulus Condition', mrksz, ax);

end