function fig_pretty = ...
    plot_s_c(numerosities, ind_data_s, ind_data_c, ...
    avg_data_s, avg_data_c, err_data_s, err_data_c, what_analysis, ...
    who_analysis, calc_type, experiment, ...
    err_type, jitterwidth, colours_split, mrksz, plot_font, plot_pos, ...
    linewidth, capsize, linestyle, factors)

% function to plot behavioural data with focus on comparing standard &
% control conditions

% pre allocation
leg_patch = [];
leg_label = string();
dot_plots = {};

% pre definition
dot_alpha = 0.3;
marker_factor = 4;

% create figure
fig = figure("Visible", "off");
hold on
ax = gca;
axis padded

% Subplot Adjustments
ax.YGrid = "on";    % horizontal grid lines
ax.Color = [1 1 1];     % set bakcground colour to white
ax.XColor = "k";    % set y-axis colour to black
ax.YColor = "k";    % set x-axis colour to black
ax.FontWeight = "bold";
ax.XAxis.FontSize = plot_font;  % set fontsize of x ticks
ax.YAxis.FontSize = plot_font;  % set fontsize of y ticks
ax.XTick = numerosities(:, 1);  % set x ticks
ax.XTickLabel = num2str(numerosities(:, 1));
ax.XTickLabelRotation = 0;
ax.XLim = [min(numerosities(:, 1)) - .5 max(numerosities(:, 1)) + .5];
xlabel(ax, "Sample Numerosity", "FontWeight", "bold")
set(gca, "TickDir", "out")
if strcmp(what_analysis, 'Reaction Times')
    ax.YLim = [0 650];
    ylabel(ax, "Reaction Times [ms]")
elseif strcmp(what_analysis, 'Performance')
    ax.YLim = [0 1];
    ax.YTick = 0:0.2:1;
    ylabel(ax, "Performance")
else
    ax.YLim = [0 1];
    ax.YTick = 0:0.2:1;
    ylabel(ax, what_analysis)
end

% iterate over samples
for sample_idx = 1:size(numerosities, 1)
    
    % Plot individual dots
    if strcmp(what_analysis, 'Reaction Times')
        y_vals_ind_s = vertcat(ind_data_s{:, :, sample_idx, 1});
        y_vals_ind_c = vertcat(ind_data_c{:, :, sample_idx, 1});
    else
        y_vals_ind_s = reshape(ind_data_s(:, :, sample_idx, :), [], 1);
        y_vals_ind_c = reshape(ind_data_c(:, :, sample_idx, :), [], 1);
    end

    % Adjust x vals
    x_vals_s = (ones(numel(y_vals_ind_s), 1) * ...
        numerosities(sample_idx, 1)) - jitterwidth;
    x_vals_c = (ones(numel(y_vals_ind_c), 1) * ...
        numerosities(sample_idx, 1)) + jitterwidth;

    % Plot individual Dots: Standard Conditions
    dot_plot_s = swarmchart(x_vals_s, y_vals_ind_s, ...
        mrksz * marker_factor, ...
        "XJitter", "randn", ...
        "XJitterWidth", jitterwidth * 0.5, ...
        "Marker", "o", ...
        "MarkerFaceColor", colours_split{1}, ...
        "MarkerEdgeColor", "none", ...
        "MarkerFaceAlpha", dot_alpha);

    % Plot Individual Dots: Control Conditions
    dot_plot_c = swarmchart(x_vals_c, y_vals_ind_c, ...
        mrksz * marker_factor, ...
        "XJitter", "randn", ...
        "XJitterWidth", jitterwidth * 0.5, ...
        "Marker", "o", ...
        "MarkerFaceColor", colours_split{2}, ...
        "MarkerEdgeColor", "none", ...
        "MarkerFaceAlpha", dot_alpha);

    % Adjust Colors for Error & Mean Plot
    avg_colours = cell2mat(colours_split);
    avg_colours = rgb2hsv(avg_colours);
    avg_colours(:, 3) = avg_colours(:, 3) * .7;
    avg_colours = hsv2rgb(avg_colours);
    
    % Plot Averages
    if strcmp(what_analysis, 'Reaction Times')

        % Plot Boxplot: Standard Conditions
        plot_pattern_s = boxchart(x_vals_s, y_vals_ind_s, ...
            "BoxFaceColor", colours_split{1}, ...
            "BoxEdgeColor", avg_colours(1, :), ...
            "BoxFaceAlpha", 0.2, ...
            "BoxMedianLineColor", avg_colours(1, :), ...
            "WhiskerLineColor", avg_colours(1, :), ...
            "WhiskerLineStyle", "none", ...
            "LineWidth", linewidth, ...
            "MarkerStyle", "none");
        plot_pattern_s.BoxWidth = plot_pattern_s.BoxWidth / 3;

        % Plot Boxplot: Control Conditions
        plot_pattern_c = boxchart(x_vals_c, y_vals_ind_c, ...
            "BoxFaceColor", colours_split{2}, ...
            "BoxEdgeColor", avg_colours(2, :), ...
            "BoxFaceAlpha", 0.2, ...
            "BoxMedianLineColor", avg_colours(2, :), ...
            "WhiskerLineColor", avg_colours(2, :), ...
            "WhiskerLineStyle", "none", ...
            "LineWidth", linewidth, ...
            "MarkerStyle", "none");
        plot_pattern_c.BoxWidth = plot_pattern_c.BoxWidth / 3;

    else

        % Adjust y vals
        y_vals_s = avg_data_s(sample_idx);
        y_vals_c = avg_data_c(sample_idx);
        y_err_s = err_data_s(sample_idx);
        y_err_c = err_data_c(sample_idx);

        % Adjust x vals
        x_vals_s = (ones(numel(y_vals_s), 1) * ...
            numerosities(sample_idx, 1)) - jitterwidth;
        x_vals_c = (ones(numel(y_vals_c), 1) * ...
            numerosities(sample_idx, 1)) + jitterwidth;

        % Mark Chance Level
        chance_colour = ax.GridAlpha;
        yline(0.5, ...
            "LineStyle", ":", ...
            "Alpha", chance_colour * 3, ...
            "LineWidth", linewidth, ...
            "Color", "k")

        % Plot Error: Standard Conditions
        error_plot_s = ...
            errorbar(x_vals_s, y_vals_s, y_err_s, y_err_s, ...
            "LineStyle", "none", ...
            "Color", avg_colours(1, :), ...
            "LineWidth", linewidth, ...
            "CapSize", capsize, ...
            "MarkerSize", mrksz);

        % Plot Error: Control Conditions
        error_plot_c = ...
            errorbar(x_vals_c, y_vals_c, y_err_c, y_err_c, ...
            "LineStyle", "none", ...
            "Color", avg_colours(2, :), ...
            "LineWidth", linewidth, ...
            "CapSize", capsize, ...
            "MarkerSize", mrksz);

        % Plot Mean: Standard Conditions
        plot_pattern_s = plot(x_vals_s, y_vals_s, ...
            "LineStyle", linestyle, ...
            "LineWidth", linewidth, ...
            "Marker", "o", ...
            "Color", avg_colours(1, :), ...
            "MarkerFaceColor", avg_colours(1, :), ...
            "MarkerEdgeColor", "none", ...
            "MarkerSize", mrksz);

        % Plot Mean: Control Conditions
        plot_pattern_c = plot(x_vals_c, y_vals_c, ...
            "LineStyle", linestyle, ...
            "LineWidth", linewidth, ...
            "Marker", "o", ...
            "Color",avg_colours(2, :), ...
            "MarkerFaceColor", avg_colours(2, :), ...
            "MarkerEdgeColor", "none", ...
            "MarkerSize", mrksz);
    end

    % Add invisible plot for err_type
    err_plot = errorbar(1, 1, 5, 1, ...
        "LineStyle", "none", ...
        "Color", "k", ...
        "LineWidth", linewidth, ...
        "CapSize", capsize, ...
        "MarkerSize", mrksz, ...
        "Marker", "o", ...
        "MarkerEdgeColor", "none", ...
        "MarkerFaceColor", "k");

    % Legend
    leg_patch(1) = plot_pattern_s;
    leg_patch(2) = plot_pattern_c;
    leg_patch(3) = err_plot;
    leg_label(1) = factors{1};
    leg_label(2) = factors{2};
    leg_label(3) = err_type;
end

% Figure Adjustments

fig_title = title([calc_type ' ' what_analysis ' of ' ...
    who_analysis ' in ' experiment ' Sample Time ']); 
[fig_pretty, ~] = ...
    prettify_plot(fig, plot_pos, fig_title, plot_font, ...
    true, leg_patch, leg_label, 'Stimulus Condition', mrksz, ax);

end